"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞
"""
import os
import json
import logging
from typing import Dict, Optional, Any, List

class LanguageManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –±–æ—Ç–∞"""
    
    def __init__(self, language_dir: str = "bot/languages", default_language: str = "ru"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —è–∑—ã–∫–æ–≤
        
        Args:
            language_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —è–∑—ã–∫–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            default_language (str): –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        self.language_dir = language_dir
        self.default_language = default_language
        self.languages: Dict[str, Dict[str, Any]] = {}
        self.guild_languages: Dict[int, str] = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —è–∑—ã–∫–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(language_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._load_languages()
    
    def _load_languages(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            for filename in os.listdir(self.language_dir):
                if filename.endswith('.json'):
                    language_code = filename.split('.')[0]  # Extract language code from filename
                    file_path = os.path.join(self.language_dir, filename)
                    
                    with open(file_path, 'r', encoding='utf-8') as file:
                        self.languages[language_code] = json.load(file)
                        logging.info(f"Loaded language file: {filename}")
        except Exception as e:
            logging.error(f"Error loading language files: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —è–∑—ã–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            self._create_default_language_files()
    
    def _create_default_language_files(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        ru_lang = {
            "bot": {
                "name": "Discord –ê–¥–º–∏–Ω –ë–æ—Ç",
                "description": "–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord —Å–µ—Ä–≤–µ—Ä–∞–º–∏"
            },
            "commands": {
                "ping": {
                    "title": "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                    "description": "ü§ñ –ü–∏–Ω–≥: **{ping}ms**\nüì° API –∑–∞–¥–µ—Ä–∂–∫–∞: **{api_latency}ms**"
                },
                "stats": {
                    "title": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
                    "description": "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞",
                    "uptime": "‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
                    "servers": "üåê –°–µ—Ä–≤–µ—Ä–æ–≤",
                    "users": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    "memory": "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
                },
                "help": {
                    "title": "üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                    "description": "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
                    "command_details": "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ: {command}",
                    "command_not_found": "‚ùå –ö–æ–º–∞–Ω–¥–∞ `{command}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "no_commands": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
                },
                "module": {
                    "title": "üß© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏",
                    "list": "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å:",
                    "status": "–°—Ç–∞—Ç—É—Å: {status}",
                    "not_found": "‚ùå –ú–æ–¥—É–ª—å `{module}` –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "enabled": "‚úÖ –ú–æ–¥—É–ª—å `{module}` –≤–∫–ª—é—á–µ–Ω",
                    "disabled": "‚ùå –ú–æ–¥—É–ª—å `{module}` –æ—Ç–∫–ª—é—á–µ–Ω"
                },
                "language": {
                    "title": "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–º",
                    "description": "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: **{language}**",
                    "invalid": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {languages}",
                    "set": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **{language}**"
                }
            },
            "errors": {
                "missing_permissions": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                "bot_missing_permissions": "‚ùå –£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                "command_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {error}",
                "database_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {error}"
            }
        }
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
        en_lang = {
            "bot": {
                "name": "Discord Admin Bot",
                "description": "Multifunctional bot for Discord server management"
            },
            "commands": {
                "ping": {
                    "title": "üì° Connection Check",
                    "description": "ü§ñ Ping: **{ping}ms**\nüì° API latency: **{api_latency}ms**"
                },
                "stats": {
                    "title": "üìä Bot Statistics",
                    "description": "Current information about the bot",
                    "uptime": "‚è±Ô∏è Uptime",
                    "servers": "üåê Servers",
                    "users": "üë• Users",
                    "memory": "üíæ Memory Usage"
                },
                "help": {
                    "title": "üìö Command List",
                    "description": "Here's a list of available commands:",
                    "command_details": "üìù Command Information: {command}",
                    "command_not_found": "‚ùå Command `{command}` not found",
                    "no_commands": "No commands available"
                },
                "module": {
                    "title": "üß© Module Management",
                    "list": "List of all available modules and their status:",
                    "status": "Status: {status}",
                    "not_found": "‚ùå Module `{module}` not found",
                    "enabled": "‚úÖ Module `{module}` enabled",
                    "disabled": "‚ùå Module `{module}` disabled"
                },
                "language": {
                    "title": "üåê Language Management",
                    "description": "Current language: **{language}**",
                    "invalid": "‚ùå Invalid language. Available languages: {languages}",
                    "set": "‚úÖ Language changed to **{language}**"
                }
            },
            "errors": {
                "missing_permissions": "‚ùå You don't have the necessary permissions to use this command",
                "bot_missing_permissions": "‚ùå The bot doesn't have enough permissions to execute this command",
                "command_error": "‚ùå An error occurred while executing the command: {error}",
                "database_error": "‚ùå Database error: {error}"
            }
        }
        
        # –ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫
        de_lang = {
            "bot": {
                "name": "Discord Admin Bot",
                "description": "Multifunktionaler Bot f√ºr die Discord-Serververwaltung"
            },
            "commands": {
                "ping": {
                    "title": "üì° Verbindungspr√ºfung",
                    "description": "ü§ñ Ping: **{ping}ms**\nüì° API-Latenz: **{api_latency}ms**"
                },
                "stats": {
                    "title": "üìä Bot-Statistiken",
                    "description": "Aktuelle Informationen √ºber den Bot",
                    "uptime": "‚è±Ô∏è Betriebszeit",
                    "servers": "üåê Server",
                    "users": "üë• Benutzer",
                    "memory": "üíæ Speichernutzung"
                },
                "help": {
                    "title": "üìö Befehlsliste",
                    "description": "Hier ist eine Liste der verf√ºgbaren Befehle:",
                    "command_details": "üìù Befehlsinformationen: {command}",
                    "command_not_found": "‚ùå Befehl `{command}` nicht gefunden",
                    "no_commands": "Keine Befehle verf√ºgbar"
                },
                "module": {
                    "title": "üß© Modulverwaltung",
                    "list": "Liste aller verf√ºgbaren Module und ihr Status:",
                    "status": "Status: {status}",
                    "not_found": "‚ùå Modul `{module}` nicht gefunden",
                    "enabled": "‚úÖ Modul `{module}` aktiviert",
                    "disabled": "‚ùå Modul `{module}` deaktiviert"
                },
                "language": {
                    "title": "üåê Sprachverwaltung",
                    "description": "Aktuelle Sprache: **{language}**",
                    "invalid": "‚ùå Ung√ºltige Sprache. Verf√ºgbare Sprachen: {languages}",
                    "set": "‚úÖ Sprache auf **{language}** ge√§ndert"
                }
            },
            "errors": {
                "missing_permissions": "‚ùå Sie haben nicht die erforderlichen Berechtigungen, um diesen Befehl zu verwenden",
                "bot_missing_permissions": "‚ùå Der Bot hat nicht gen√ºgend Berechtigungen, um diesen Befehl auszuf√ºhren",
                "command_error": "‚ùå Bei der Ausf√ºhrung des Befehls ist ein Fehler aufgetreten: {error}",
                "database_error": "‚ùå Datenbankfehler: {error}"
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._save_language_file('ru', ru_lang)
        self._save_language_file('en', en_lang)
        self._save_language_file('de', de_lang)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.languages = {
            'ru': ru_lang,
            'en': en_lang,
            'de': de_lang
        }
    
    def _save_language_file(self, language_code: str, data: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            language_code (str): –ö–æ–¥ —è–∑—ã–∫–∞
            data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            os.makedirs(self.language_dir, exist_ok=True)
            file_path = os.path.join(self.language_dir, f"{language_code}.json")
            
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)
                
            logging.info(f"Created language file: {language_code}.json")
        except Exception as e:
            logging.error(f"Error creating language file {language_code}.json: {e}")
    
    def get_text(self, key_path: str, language: str, **kwargs) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á—É
        
        Args:
            key_path (str): –ü—É—Ç—å –∫ –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "commands.ping.title")
            language (str): –ö–æ–¥ —è–∑—ã–∫–∞
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        
        Returns:
            str: –¢–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        """
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if language not in self.languages:
            language = self.default_language
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
        keys = key_path.split('.')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —è–∑—ã–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            text = self.languages[language]
            for key in keys:
                text = text[key]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if kwargs:
                return text.format(**kwargs)
            
            return text
        except (KeyError, TypeError):
            # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                text = self.languages[self.default_language]
                for key in keys:
                    text = text[key]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                if kwargs:
                    return text.format(**kwargs)
                
                return text
            except (KeyError, TypeError):
                # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –≤ —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á
                return key_path
    
    def get_available_languages(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —è–∑—ã–∫–æ–≤
        """
        language_names = {
            "ru": "–†—É—Å—Å–∫–∏–π",
            "en": "English",
            "de": "Deutsch"
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
        available = {code: name for code, name in language_names.items() if code in self.languages}
        
        return available
    
    async def set_guild_language(self, guild_id: int, language: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            guild_id (int): ID —Å–µ—Ä–≤–µ—Ä–∞
            language (str): –ö–æ–¥ —è–∑—ã–∫–∞
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if language not in self.languages:
            return False
        
        self.guild_languages[guild_id] = language
        return True
    
    async def get_guild_language(self, guild_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            guild_id (int): ID —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            str: –ö–æ–¥ —è–∑—ã–∫–∞
        """
        return self.guild_languages.get(guild_id, self.default_language)