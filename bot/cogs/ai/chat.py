import disnake
from disnake.ext import commands
import aiohttp
import logging
import json
from datetime import datetime
from typing import Dict, Any, Optional

from bot.utils.logger import get_logger_for_cog

logger = get_logger_for_cog("ai")

class AI(commands.Cog):
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self, bot):
        self.bot = bot
        self.api_key = None
        self.model = None
        self.max_tokens = 256
        self.temperature = 0.7
        self.session = None
        self.chat_histories = {}  # user_id -> [messages]
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.max_history_length = 10
        
        # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API
        self.openai_url = "https://api.openai.com/v1/chat/completions"
        
        # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Grok API (—Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        self.grok_url = "https://api.grok.ai/v1/chat/completions"
    
    async def cog_load(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cog"""
        # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏
        self.session = aiohttp.ClientSession()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ai_config = self.bot.config.get("modules", {}).get("ai", {})
        self.api_key = ai_config.get("api_key", "")
        self.model = ai_config.get("model", "gpt-3.5-turbo")
        self.max_tokens = ai_config.get("max_tokens", 256)
        self.temperature = ai_config.get("temperature", 0.7)
        
        logger.info(f"AI –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: {self.model})")
    
    async def cog_unload(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ cog"""
        if self.session:
            await self.session.close()
    
    @commands.slash_command(name="ask", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É")
    async def ask(
        self, 
        inter: disnake.ApplicationCommandInteraction,
        question: str = commands.Param(description="–í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ AI"),
        reset_context: bool = commands.Param(False, description="–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
    ):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not self.api_key:
            guild_language = await self.bot.get_guild_language(inter.guild.id)
            error_text = self.bot.language_manager.get_text(
                "ai.ask.api_key_missing", 
                guild_language
            )
            return await inter.response.send_message(error_text, ephemeral=True)
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
        await inter.response.defer()
        
        # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if reset_context:
            self.chat_histories.pop(inter.author.id, None)
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inter.author.id}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if inter.author.id not in self.chat_histories:
            self.chat_histories[inter.author.id] = []
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.chat_histories[inter.author.id].append({
            "role": "user",
            "content": question
        })
        
        # –û–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if len(self.chat_histories[inter.author.id]) > self.max_history_length:
            self.chat_histories[inter.author.id] = self.chat_histories[inter.author.id][-self.max_history_length:]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
        try:
            response = await self._get_ai_response(self.chat_histories[inter.author.id])
            
            if not response:
                guild_language = await self.bot.get_guild_language(inter.guild.id)
                error_text = self.bot.language_manager.get_text(
                    "ai.ask.error", 
                    guild_language,
                    error="–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"
                )
                return await inter.followup.send(error_text)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.chat_histories[inter.author.id].append({
                "role": "assistant",
                "content": response
            })
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –æ—Ç–≤–µ—Ç–æ–º
            guild_language = await self.bot.get_guild_language(inter.guild.id)
            
            embed = disnake.Embed(
                title=self.bot.language_manager.get_text("ai.ask.title", guild_language),
                description=response[:4000],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–∞
                color=disnake.Color(self.bot.config.get('embed', {}).get('colors', {}).get('info', 0x7289da))
            )
            
            embed.set_footer(
                text=f"Model: {self.model} | {self.bot.language_manager.get_text('ai.ask.context_length', guild_language, length=len(self.chat_histories[inter.author.id]) // 2)}"
            )
            
            embed.timestamp = datetime.utcnow()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            class AIControls(disnake.ui.View):
                def __init__(self, cog, user_id):
                    super().__init__(timeout=60)
                    self.cog = cog
                    self.user_id = user_id
                
                @disnake.ui.button(label="–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", style=disnake.ButtonStyle.danger, emoji="üîÑ")
                async def reset_context(self, button: disnake.ui.Button, button_inter: disnake.MessageInteraction):
                    if button_inter.author.id != self.user_id:
                        guild_language = await self.cog.bot.get_guild_language(button_inter.guild.id)
                        not_for_you_text = self.cog.bot.language_manager.get_text("ai.ask.not_for_you", guild_language)
                        return await button_inter.response.send_message(not_for_you_text, ephemeral=True)
                    
                    # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏
                    self.cog.chat_histories.pop(self.user_id, None)
                    
                    guild_language = await self.cog.bot.get_guild_language(button_inter.guild.id)
                    reset_text = self.cog.bot.language_manager.get_text("ai.ask.context_reset", guild_language)
                    await button_inter.response.send_message(reset_text, ephemeral=True)
                    
                    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                    for item in self.children:
                        item.disabled = True
                    
                    await button_inter.message.edit(view=self)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await inter.followup.send(embed=embed, view=AIControls(self, inter.author.id))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: {e}")
            
            guild_language = await self.bot.get_guild_language(inter.guild.id)
            error_text = self.bot.language_manager.get_text(
                "ai.ask.error", 
                guild_language,
                error=str(e)
            )
            await inter.followup.send(error_text)
    
    async def _get_ai_response(self, messages):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI API
        
        Args:
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user", "content": "..."}, ...]
        
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç AI –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∫–∞–∫–æ–π API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            if self.model.lower().startswith("gpt") or self.model.lower() == "gpt-3.5-turbo":
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenAI API
                return await self._get_openai_response(messages)
            elif self.model.lower() == "grok-1":
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Grok API
                return await self._get_grok_response(messages)
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å AI: {self.model}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: {e}")
            return None
    
    async def _get_openai_response(self, messages):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API
        
        Args:
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user", "content": "..."}, ...]
        
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç OpenAI –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        
        payload = {
            "model": self.model,
            "messages": messages,
            "max_tokens": self.max_tokens,
            "temperature": self.temperature
        }
        
        try:
            async with self.session.post(self.openai_url, headers=headers, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    return data["choices"][0]["message"]["content"].strip()
                else:
                    error_data = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {response.status} - {error_data}")
                    return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
            return None
    
    async def _get_grok_response(self, messages):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Grok API
        
        Args:
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user", "content": "..."}, ...]
        
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç Grok –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Grok API –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç OpenAI,
        # –∫–æ–¥ –Ω–∏–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–º –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π API
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        
        payload = {
            "model": self.model,
            "messages": messages,
            "max_tokens": self.max_tokens,
            "temperature": self.temperature
        }
        
        try:
            async with self.session.post(self.grok_url, headers=headers, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ Grok API
                    return data["choices"][0]["message"]["content"].strip()
                else:
                    error_data = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ Grok API: {response.status} - {error_data}")
                    return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Grok API: {e}")
            return None

# Setup function for the cog
def setup(bot):
    bot.add_cog(AI(bot))